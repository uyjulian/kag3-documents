<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>変数を使おう</title>

<para>
<ptitle>変数とは</ptitle>
<r/>
　KAG における変数とは、<r/>
<r/>
・なにかを記憶させておく物<r/>
<r/>
　にすぎません。<r/>
<r/>
　ただし、KAG は、<kw>TJS2</kw> というスクリプト言語をベースにしているシステムであり、KAG における変数とは TJS2 の変数そのものですのでかなり強力な機能を発揮します。<r/>
<r/>
　ここはチュートリアルですので、基本的な使い方のみを述べますが、さらに KAG 内部のメソッドやプロパティにアクセスするとか、吉里吉里の機能を直接使うとなると、ほぼ<b>泥沼</b>状態なので、はまりやすい性格の方はご注意を(笑)。<r/>
</para>

<para>
<ptitle>変数の種類</ptitle>
　KAG の変数の種類には 3 つあります。栞のセーブとロードとともにセーブ・ロードされる普通の「<kw>ゲーム変数</kw>」と、栞のセーブ・ロードとは関係なしに、常に値を保持できる「<kw>システム変数</kw>」、一時的に値をおいておくための「<kw>一時変数</kw>」があります。「システム変数」は、吉里吉里/KAG を終了させて、また同じゲームを起動すれば値を保持しています。「一時変数」は吉里吉里を終了させると内容は失われてしまいますし、栞にも値は保存されません。<r/>
<r/>
　ゲーム変数には <kw>f</kw> という名前が、システム変数には <kw>sf</kw> という名前が、一時変数には <kw>tf</kw> という名前が与えられてます。<r/>
<r/>
　また、KAG ( というか TJS2 ) の変数には、文字列でも数値でも入れることができます ( 文字列や数値などの、変数の中に入れるものの種類を「<kw>型</kw>」といいます )。変数には(ほぼ)自由な名前を付けることができ、変数の数に制限はありませんし、文字列の長さに制限はありません。数値は実数も扱うことができます。<r/>
　KAG 3.x からは「配列」と「辞書配列」も扱うことができるようになりました ( ここでは説明しません )。<r/>
<note>
　TJS2 の整数型は 64bit、実数型は double ( 倍精度 ) の精度を持っています。<r/>
　文字列はゼロ終結 UNICODE 文字列を扱い、長さ制限はありません。<r/>
</note>
</para>

<para>
<ptitle>変数として使用可能な名前</ptitle>
　吉里吉里 / KAG では、変数はほぼ自由に名前を付けることができます。しかし、自由といっても吉里吉里 / KAG が使用可能な変数の名前にはルールがあります。<r/>
<r/>
<dl>
<dt>変数名には半角英数と全角文字、_ (アンダーバー) を使うことができる</dt>
<dd>
　<b><tt>abc&amp;def</tt></b> や、<b><tt>a-z</tt></b> のような変数名は使用できません。<r/>
　<b><tt>final_count</tt></b> のようにアンダーバーを含んだり、<b><tt>主人公の名前</tt></b> のように全角文字を使用することができます(全角の記号はすべて使用可能です)。
</dd>
<dt>ただし 変数の名頭に半角の数字が来ることはできない</dt>
<dd>
　<b><tt>2friends</tt></b> や <b><tt>3com</tt></b> のような変数名は使用できません ( 全角の数字が先頭に来るのであれば OK です)。
</dd>
</dl>
<r/>
　これらの変数名の前に、ゲーム変数であれば <b><tt>f.</tt></b> を、システム変数であれば <b><tt>sf.</tt></b> を、一時変数であれば <b><tt>tf.</tt></b> を付けます。
<r/>
　たとえば、以下のような変数名が考えられます。<r/>
<r/>
<tt> <b>f.flag1  sf.username  sf.playcount  tf.i  f.enokazu  f.変数その１ </b>...</tt><r/>
<r/>
　また、初めて使う変数はすべて数値としては 0 で、文字列としては '' ( 空文字列 ) という、すこし特殊な状態にあります。一般的には、変数は最初に値をいれてから使ってください。<r/>
<r/>
<note>
　<b>f</b> や <b>sf</b> や <b>tf</b> の他に <b>kag</b> というのを見かけるかも知れませんが、<b>kag</b> は KAG のシステム内部に直接アクセスするときに使われる物です。<r/>
</note>
</para>

<para>
<ptitle>変数への代入</ptitle>
　そうしたら、変数に値を代入するには、通常 <kw>eval</kw> タグを使います。たとえば、<tt>f.flag1</tt> に 1000 を代入したい場合・・・<r/>
<bq>
[eval exp="<b>f.flag1 <kw>=</kw> 1000</b>"]<r/>
</bq>
　とします。つまり、変数名の後に = を書き、その後に代入したい数値を指定します。<r/>
<r/>
　文字列を代入したい場合は、<r/>
<bq>
[eval exp="<b>f.変数その１ = '文字列'</b>"]<r/>
</bq>
　とします。つまり、 = の後に '' でくくった文字列を指定します ( シングルクォーテーションとダブルクォーテーションに注意してください )。<r/>
　文字列用の変数や、数値用の変数というように、変数に入れるものの型によって名前が変わると言うことはありません。入れたものの型になります。<r/>
<r/>
　ほかの変数に内容をコピーする場合は、<r/>
<bq>
[eval exp="<b>f.flag1 = f.flag2</b>"]<r/>
</bq>
<r/>
のようにします。<r/>
</para>

<para>
<ptitle>変数の演算</ptitle>
<r/>
　計算をしたい場合は、<r/>
<bq>
[eval exp="<b>f.flag1 = f.flag1 + 1</b>"]<r/>
</bq>
　等とします。この例では、f.flag1 に 1 を足した物を f.flag1 に代入しています ( つまり f.flag1 に 1 を足している )。<r/>
　exp 属性には TJS2 における「<kw>式</kw>」を書きます。<r/>
　式には、<kw>*</kw>(乗算) <kw>/</kw>(除算) <kw>+</kw>(加算) <kw>-</kw>(減算) のような普通の<kw>演算子</kw>は普通に使えます ( 数学の式のように優先順位もあります )。(  )  カッコも普通に使えます。<r/>
　たとえば、<r/>
<bq>
[eval exp="<b>f.flag1 = f.flag1 + f.flag2 * f.flag3</b>"]<r/>
</bq>
　とすると、f.flag2 と f.flag3 をかけたものに f.flag1 が加算されたものが f.flag1 に入ります。<r/>
<r/>
　除算を行うときは / (スラッシュ) を用います。<r/>
<bq>
[eval exp="<b>f.flag1 = f.flag2 / f.flag3</b>"]<r/>
</bq>
　この場合は f.flag2 を f.flag3 で割った物が f.flag1 に入ります。<r/>
　しかし、割り切れなかった場合は f.flag1 が実数になってしまうので、あまった分を切り捨てて整数の結果を得たい場合は、整数除算演算子 \ を用いて、<r/>
<bq>
[eval exp="<b>f.flag1 = f.flag2 \ f.flag3</b>"]<r/>
</bq>
　と記述します。<r/>
<r/>
<r/>
　あと、文字列同士のつなぎ合わせにも + 演算子を使います。<r/>
<r/>
<bq>
[eval exp="f.flag2 = 'hoge'"]<r/>
[eval exp="f.flag3 = 'une'"]<r/>
[eval exp="<b>f.flag1= f.flag2 + f.flag3</b>"]<r/>
</bq>
　上記の例では、 f.flag1 には 'hogeune' という文字列が入ります。<r/>
<r/>
<note>
　TJS2 の文法は JavaScript (ECMAScript) を参考にして作られたため、これによく似ています ( 完全に同じではありません )。<r/>
　通常の算術演算の振る舞いはほぼ同じです。文字列の扱いや文字列と数値の混合演算もほぼ同じです。<r/>
</note>
</para>

<para>
<ptitle>文字列と数値</ptitle>
　KAG の変数は、文字列用の変数、数値用の変数というように変数が分かれることも、名前が変わることもありません。<r/>
　文字列を入れればその変数は文字列が、数値をいれればその変数は数値の入った変数になります。<r/>
　厄介なのはこれらをまぜて使うときです。+ 演算子にはいろいろな意味とその使い方があります(^^;<r/>
<r/>
　文字列同士のつなぎ合わせには + 演算子、数値の加算にも + 演算子を使いますが、文字列と数値を足そうとしたときは、どちらか一方が文字列ならば、片方の数値は文字列に変換されてつなぎ合わさるというルールがあります。<r/>
<r/>
　たとえば、f.flag2 に 'hoge' という文字列、f.flag3 に 10 という数値が入っていた場合、<r/>
<bq>
[eval exp="<b>f.flag1 = f.flag2 + f.flag2</b>"]<r/>
</bq>
　では、f.flag1 には 'hoge10' という文字列が入ります。
<r/>
<r/>
　また、どうしても文字列を数値に変換したい場合があると思います。たとえば [input] タグで入力したものを数値として扱いたいときなどですが、この場合にも + 演算子を使います。+ 演算子は、数値にしたい変数の前につけて使います。たとえば、f.flag1 に '20' という文字列が入っていたとして、<r/>
<r/>
<bq>
[eval exp="<b>f.flag1 = +f.flag1</b>"]<r/>
</bq>
<r/>
　と書けば、f.flag1 の内容は数値に変換され、再び f.flag1 に入ります。f.flag1 は数値の 20 になります。<r/>
<r/>
<note>
　+ 演算子が続く場合は注意しなければなりません。f.flag3 を数値にして f.flag2 に加算するなどという式を書く場合、<tt>f.flag2++f.flag3</tt> という書き方ではエラーになります ( ++ という別の演算子があるため )。スペースを空けて <tt>f.flag2+ +f.flag3</tt> と書いてください。<r/>
</note>
<note>
　単項の + 演算子 ( 上記例の <tt>f.flag1 = +f.flag1</tt> のような場合の + ) は、文字列がもし小数表記を含む場合 ( 0.3 とか ) は、結果が実数になります。整数のみを得たい場合は ( 小数点以下を切り捨ててしまいたい場合は )、int + と書けば OK です。たとえば上記例でいけば、<tt>f.flag1 = int +f.flag1</tt> となります。<r/>
</note>
</para>

<para>
<ptitle>変数の削除・そのほか</ptitle>
　変数を削除するには <kw>delete</kw> を用います。<b>delete 変数名</b> でその変数を削除することができます。<r/>
　たとえば、<tt>f.flag1</tt> を削除したい場合は、<r/>
<bq>
[eval exp="<b>delete f.flag1</b>"]<r/>
</bq>
　とします。<r/>
<r/>
　また、<kw>clearvar</kw> タグは、ゲーム変数をすべて削除します。<r/>
<r/>
　そのほか、TJS2 で使用可能な演算子や math オブジェクトによる三角関数等の計算 ( そんなの必要かはわかりませんが ) などをすべて使えます。詳しくは吉里吉里 SDK の TJS2 ヘルプを参照してください。<r/>
<r/>
　<kw>,</kw> (カンマ)を使って複数の式を一つの eval タグ内に書くことができます。<r/>
たとえば、<r/>
<bq>
[eval exp="f.first=true"]<r/>
[eval exp="f.flag0=0"]<r/>
[eval exp="f.flag1=0"]<r/>
</bq>
　というような式は、以下のように簡潔に書くことができます。<r/>
<bq>
[eval exp="f.first=true<b>,</b> f.flag0=0<b>,</b> f.flag1=0"]<r/>
</bq>
<r/>
　また、<kw>iscript</kw> タグを用いると、連続した eval タグを簡潔に書くことができます。<r/>
<r/>
　たとえば、上の式は、<r/>
<r/>
<bq>
[iscript]<r/>
f.first=true<b>;</b><r/>
f.flag0=0<b>;</b><r/>
f.flag1=0<b>;</b><r/>
[endscript]<r/>
</bq>
<r/>
　と書くことができます。各式のあとに ; ( セミコロン ) を忘れないでください。<r/>
　このように , (カンマ) や iscript を使うと、使わない場合に比べて非常に高速になります。<r/>
</para>

<para>
<ptitle>変数の内容を表示する</ptitle>
　変数の内容をシナリオ中に表示したい場合は、<kw>emb</kw> タグを使います。<r/>
　たとえば、以下のようになります。<r/>
<bq>
[wait time=200]<r/>
*start<r/>
[cm]<r/>
[eval exp="f.数値=200"][eval exp="f.mojiretu='文字列'"]<r/>
f.数値 の内容 : [emb exp="f.数値"][l][r]<r/>
f.mojiretu の内容 : [emb exp="f.mojiretu"][l][r]<r/>
</bq>
<r/>
　実行すると、<r/>
<r/>
f.数値 の内容 : 200<r/>
f.mojiretu の内容 : 文字列<r/>
<r/>
　と表示されるはずです。<r/>
</para>

<para>
<ptitle>エンティティ</ptitle>
　エンティティというのは、変数の内容で、他のタグの属性の値を置き換える機能です。<r/>
　属性の値に、 <kw>&amp;</kw> に続けて変数名を書きます。<r/>
<bq>
[wait time=200]<r/>
*start<r/>
[cm]<r/>
[eval exp="f.fontsize=60"]<r/>
[font size="&amp;f.fontsize"]サイズ 60 の文字[resetfont]<r/>
</bq>
<r/>
　この場合は、f.fontsize に代入された 60 という数値で、font タグの size 属性の値を置き換えています。<r/>
<r/>
　実際はエンティティは、&amp; の後に書かれた属性の値の内容を、TJS2 式として実行して、その結果で属性の値を置き換える機能です。従って、&amp; の後には TJS2 式を書くことが出来ます。<r/>
</para>


<para>
<ptitle>条件の判断</ptitle>
　変数がある値と同じであるかを判断するためには以下の演算子を使うことができます。<r/>
<bq>
a<kw>==</kw>b    a が b と等しいときに真(true)<r/>
a<kw>!=</kw>b    a が b と等しくない場合に真(true)<r/>
a<kw>&lt;</kw>b     a が b より少ない場合に真(true)<r/>
a<kw>&gt;</kw>b     a が b より大きい場合に真(true)<r/>
</bq>
<r/>
　このほか >= や &lt;= (同じかより大きい、同じかより小さい) も使うことができます。<r/>
　このような条件判断は主に if タグで使います。<r/>
<r/>
　<kw>if</kw> タグは、exp で指定した式が 真(true) を示した場合にのみ endif タグまでにある文章やタグを実行します。<r/>
<r/>
<bq>
[if exp="f.flag1<b>==</b>2"]f.flag1 は 2 です[endif]<r/>
[if exp="f.flag1<b>!=</b>2"]f.flag1 は 2 ではありません[endif]<r/>
</bq>
<r/>
　変数は使い方次第で非常に強力な機能となります。<r/>
</para>

</doc>
